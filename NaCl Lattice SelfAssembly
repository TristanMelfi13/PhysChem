import math
import random
import turtle
from random import *

ScreenSize = (600, 400)

print("THIS SIMULATION IS TO REPRESENT COLUMBIC INTERACTION BETWEEN SODIUM +1 & CHLORINE -1 IONS")


def Distance(x1, y1, x2, y2):
    return math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))

def UnitVector(x1, y1, x2, y2):
    return (((x1 - x2) + (y1 - y2)) / (math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))))

def MostProbableVelocity(Temp, MolarMass):
    MolarMass /= 1000
    return math.sqrt((Temp * 8.3145 * 2) / MolarMass)
def LJTest(Distance):
    pass
class Particle:
    def __init__(self, AtomType, Xcor, Ycor, MolarMass, Charge, Color):
        self.AtomTyp = AtomType
        self.Xcor = Xcor
        self.Ycor = Ycor
        self.XVelocity = 0
        self.YVelocity = 0
        self.MolarMass = MolarMass
        self.Charge = Charge
        self.Color = Color
        self.Visual = turtle.Turtle()
        self.Visual.shape("circle")
        self.Visual.color(self.Color)
        self.Visual.shapesize(0.5)

    def InitializeTurtle(self):
        self.Visual.speed("fastest")
        self.Visual.penup()
        self.Visual.goto(self.Xcor, self.Ycor)
        DistanceFromOrigin = Distance(self.Visual.xcor(), 0, self.Visual.ycor(), 0)
        Accel = MostProbableVelocity(298, self.MolarMass)
        if self.AtomTyp == "Sodium":
            print("Most probable speed of Sodium atom at 298K {}".format(Accel))
        else:
            print("Most probable speed of Chlorine atom at 298K {}".format(Accel))
    def MoveVisual(self):
        self.Visual.penup()
        self.Visual.speed("fastest")
        self.Visual.setx(self.Visual.xcor() + self.XVelocity)
        self.Visual.sety(self.Visual.ycor() + self.YVelocity)
    def DetectWallCollision(self):
        if self.Visual.xcor() < ((ScreenSize[0] / 2) * -1) + 6 or self.Visual.xcor() > ((ScreenSize[0] / 2) - 15.5):
            self.XVelocity *= -1
        if self.Visual.ycor() < ((ScreenSize[1] / 2) * -1) + 14.5 or self.Visual.ycor() > ((ScreenSize[1] / 2) - 6):
            self.YVelocity *= -1
    def CheckForParticleCollision(self, Iter, PList):
        for j in range(len(PList)):
            if j != Iter:
                Distance = math.sqrt(math.pow(PList[j].Visual.xcor() - self.Visual.xcor(), 2) +
                                     math.pow(PList[j].Visual.ycor() - self.Visual.ycor(), 2))
                if Distance < 8:
                    XVelSave = self.XVelocity
                    YVelSave = self.YVelocity
                    self.XVelocity = PList[j].XVelocity
                    self.YVelocity = PList[j].YVelocity
                    PList[j].XVelocity = XVelSave
                    PList[j].YVelocity = YVelSave
    def CalcColumbs(self, Iter, PList):
        CoulombConstant = 8.9875517923E9
        Charge1 = self.Charge * 1.602176E-19
        for i in range(len(PList)):
            if(i != Iter):
                Charge2 = PList[i].Charge * 1.602176E-19
                Dist = (Distance(self.Xcor, self.Ycor, PList[i].Xcor, PList[i].Ycor))
                ElectroStaticForce = (CoulombConstant * Charge1 * Charge2) / math.pow(Dist, 2)
                ElectroStaticForce *= 1E26
                self.XVelocity += (ElectroStaticForce * (self.Xcor - (PList[i].Xcor / Dist)))
                self.YVelocity += (ElectroStaticForce * (self.Ycor - (PList[i].Ycor / Dist)))
def CreateNewParticle(Type):
    if Type % 2 == 0:
        NewParticle = Particle("Sodium", randrange(-1 * int(ScreenSize[0] / 2), int(ScreenSize[0] / 2)),
                               randrange(-1 * int(ScreenSize[1] / 2), int(ScreenSize[1] / 2)),
                               22.989, 1, "blue")
    else:
        NewParticle = Particle("Chlorine", randrange(-1 * int(ScreenSize[0] / 2), int(ScreenSize[0] / 2)),
                               randrange(-1 * int(ScreenSize[1] / 2), int(ScreenSize[1] / 2)),
                               35.453, -1, "red")
    if NewParticle.Xcor > 0:
        NewParticle.Xcor -= 50
    else:
        NewParticle.Xcor += 50

    if NewParticle.Ycor > 0:
        NewParticle.Ycor -= 50
    else:
        NewParticle.Ycor += 50

    NewParticle.InitializeTurtle()
    print("New Particle Created:")
    print(
        "Xcor: {} || Ycor: {} || XVel: {} || YVel: {} || Magnitude of Vector {} m/s || MolarMass: {} || Charge: {}".format(
            NewParticle.Xcor, NewParticle.Ycor, NewParticle.XVelocity, NewParticle.YVelocity,
            1000 * (math.sqrt(math.pow(NewParticle.XVelocity, 2) + math.pow(NewParticle.YVelocity, 2))),
            NewParticle.MolarMass, NewParticle.Charge))
    NewParticle.Visual.penup()
    return NewParticle


ParticleList = []

for i in range(20):
    ParticleList.append(CreateNewParticle(i))

wn = turtle.Screen()
wn.setup(width=ScreenSize[0], height=ScreenSize[1])

while True:
    XVelSum = 0
    YVelSum = 0
    for i in range(len(ParticleList)):
        turtle.tracer(0, 0)
        XVelSum += abs(ParticleList[i].XVelocity)
        YVelSum += abs(ParticleList[i].YVelocity)
        ParticleList[i].MoveVisual()
        ParticleList[i].DetectWallCollision()
        ParticleList[i].CheckForParticleCollision(i, ParticleList)
        ParticleList[i].CalcColumbs(i, ParticleList)
        turtle.update()
